/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 ./dorade.glb -o ./Dorade2.tsx --types 
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    Classique: THREE.SkinnedMesh
    Bone: THREE.Bone
  }
  materials: {
    ['Material.002']: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[]
}

type ActionName = 'ArmatureAction'
interface GLTFAction extends THREE.AnimationClip {
  name: ActionName
}
type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['skinnedMesh'] | JSX.IntrinsicElements['bone']>>

export function Model(props: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>()
  const { nodes, materials, animations } = useGLTF('/dorade.glb') as GLTFResult
  const { actions } = useAnimations(animations, group)
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="ClassiqueARM" position={[0, -0.133, 1.386]} rotation={[-Math.PI / 2, 0, 0]}>
          <primitive object={nodes.Bone} />
          <skinnedMesh name="Classique" geometry={nodes.Classique.geometry} material={materials['Material.002']} skeleton={nodes.Classique.skeleton} />
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/dorade.glb')
